// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `GenericBase.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GenericBase_h__
#define __GenericBase_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGenericBase
{

class GenericBase;
class GenericBasePrx;

}

namespace RoboCompGenericBase
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    HardwareFailedException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static HardwareFailedException _iceS_HardwareFailedException_init;

struct TBaseState
{
    float x;
    float correctedX;
    float z;
    float correctedZ;
    float alpha;
    float correctedAlpha;
    float advVx;
    float advVz;
    float rotV;
    bool isMoving;

    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const bool&> ice_tuple() const
    {
        return std::tie(x, correctedX, z, correctedZ, alpha, correctedAlpha, advVx, advVz, rotV, isMoving);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompGenericBase
{

class GenericBase : public virtual ::Ice::Object
{
public:

    using ProxyType = GenericBasePrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    struct GetBasePoseResult
    {
        int x;
        int z;
        float alpha;
    };

    virtual void getBasePose(int&, int&, float&, const ::Ice::Current&) = 0;
    bool _iceD_getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompGenericBase
{

class GenericBasePrx : public virtual ::Ice::Proxy<GenericBasePrx, ::Ice::ObjectPrx>
{
public:

    void getBasePose(int& iceP_x, int& iceP_z, float& iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompGenericBase::GenericBase::GetBasePoseResult>(true, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBasePose, context).get();
        iceP_x = result.x;
        iceP_z = result.z;
        iceP_alpha = result.alpha;
    }

    template<template<typename> class P = ::std::promise>
    auto getBasePoseAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompGenericBase::GenericBase::GetBasePoseResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompGenericBase::GenericBase::GetBasePoseResult, P>(false, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBasePose, context);
    }

    ::std::function<void()>
    getBasePoseAsync(::std::function<void(int, int, float)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompGenericBase::GenericBase::GetBasePoseResult&& result)
        {
            response(result.x, result.z, result.alpha);
        };
        return _makeLamdaOutgoing<::RoboCompGenericBase::GenericBase::GetBasePoseResult>(responseCb, ex, sent, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBasePose, context);
    }

    void _iceI_getBasePose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGenericBase::GenericBase::GetBasePoseResult>>&, const ::Ice::Context&);

    void getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_state = _makePromiseOutgoing<::RoboCompGenericBase::TBaseState>(true, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBaseState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getBaseStateAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompGenericBase::TBaseState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompGenericBase::TBaseState, P>(false, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBaseState, context);
    }

    ::std::function<void()>
    getBaseStateAsync(::std::function<void(::RoboCompGenericBase::TBaseState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompGenericBase::TBaseState>(response, ex, sent, this, &RoboCompGenericBase::GenericBasePrx::_iceI_getBaseState, context);
    }

    void _iceI_getBaseState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGenericBase::TBaseState>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    GenericBasePrx() = default;
    friend ::std::shared_ptr<GenericBasePrx> IceInternal::createProxy<GenericBasePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompGenericBase::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompGenericBase::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompGenericBase::TBaseState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompGenericBase::TBaseState, S>
{
    static void read(S* istr, ::RoboCompGenericBase::TBaseState& v)
    {
        istr->readAll(v.x, v.correctedX, v.z, v.correctedZ, v.alpha, v.correctedAlpha, v.advVx, v.advVz, v.rotV, v.isMoving);
    }
};

}

namespace RoboCompGenericBase
{

using GenericBasePtr = ::std::shared_ptr<GenericBase>;
using GenericBasePrxPtr = ::std::shared_ptr<GenericBasePrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGenericBase
{

class GenericBase;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGenericBase::GenericBase>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompGenericBase::GenericBase*);

}

}

namespace RoboCompGenericBase
{

class GenericBase;
::Ice::Object* upCast(::RoboCompGenericBase::GenericBase*);
typedef ::IceInternal::Handle< ::RoboCompGenericBase::GenericBase> GenericBasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGenericBase::GenericBase> GenericBasePrx;
typedef GenericBasePrx GenericBasePrxPtr;
void _icePatchObjectPtr(GenericBasePtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompGenericBase
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_id() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static HardwareFailedException _iceS_HardwareFailedException_init;

struct TBaseState
{
    ::Ice::Float x;
    ::Ice::Float correctedX;
    ::Ice::Float z;
    ::Ice::Float correctedZ;
    ::Ice::Float alpha;
    ::Ice::Float correctedAlpha;
    ::Ice::Float advVx;
    ::Ice::Float advVz;
    ::Ice::Float rotV;
    bool isMoving;
};

}

namespace RoboCompGenericBase
{

class Callback_GenericBase_getBasePose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GenericBase_getBasePose_Base> Callback_GenericBase_getBasePosePtr;

class Callback_GenericBase_getBaseState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GenericBase_getBaseState_Base> Callback_GenericBase_getBaseStatePtr;

}

namespace IceProxy
{

namespace RoboCompGenericBase
{

class GenericBase : public virtual ::Ice::Proxy<GenericBase, ::IceProxy::Ice::Object>
{
public:

    void getBasePose(::Ice::Int& iceP_x, ::Ice::Int& iceP_z, ::Ice::Float& iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getBasePose(iceP_x, iceP_z, iceP_alpha, _iceI_begin_getBasePose(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBasePose(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::RoboCompGenericBase::Callback_GenericBase_getBasePosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context, const ::RoboCompGenericBase::Callback_GenericBase_getBasePosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(context, del, cookie);
    }

    void end_getBasePose(::Ice::Int& iceP_x, ::Ice::Int& iceP_z, ::Ice::Float& iceP_alpha, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBasePose(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getBaseState(iceP_state, _iceI_begin_getBaseState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBaseState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::RoboCompGenericBase::Callback_GenericBase_getBaseStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context, const ::RoboCompGenericBase::Callback_GenericBase_getBaseStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(context, del, cookie);
    }

    void end_getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBaseState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompGenericBase
{

class GenericBase : public virtual ::Ice::Object
{
public:

    typedef GenericBasePrx ProxyType;
    typedef GenericBasePtr PointerType;

    virtual ~GenericBase();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const GenericBase& lhs, const GenericBase& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GenericBase& lhs, const GenericBase& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompGenericBase::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompGenericBase::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompGenericBase::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGenericBase::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompGenericBase::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompGenericBase::TBaseState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompGenericBase::TBaseState, S>
{
    static void write(S* ostr, const ::RoboCompGenericBase::TBaseState& v)
    {
        ostr->write(v.x);
        ostr->write(v.correctedX);
        ostr->write(v.z);
        ostr->write(v.correctedZ);
        ostr->write(v.alpha);
        ostr->write(v.correctedAlpha);
        ostr->write(v.advVx);
        ostr->write(v.advVz);
        ostr->write(v.rotV);
        ostr->write(v.isMoving);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGenericBase::TBaseState, S>
{
    static void read(S* istr, ::RoboCompGenericBase::TBaseState& v)
    {
        istr->read(v.x);
        istr->read(v.correctedX);
        istr->read(v.z);
        istr->read(v.correctedZ);
        istr->read(v.alpha);
        istr->read(v.correctedAlpha);
        istr->read(v.advVx);
        istr->read(v.advVz);
        istr->read(v.rotV);
        istr->read(v.isMoving);
    }
};

}

namespace RoboCompGenericBase
{

template<class T>
class CallbackNC_GenericBase_getBasePose : public Callback_GenericBase_getBasePose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float);

    CallbackNC_GenericBase_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGenericBase::GenericBasePrx proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_x;
        ::Ice::Int iceP_z;
        ::Ice::Float iceP_alpha;
        try
        {
            proxy->end_getBasePose(iceP_x, iceP_z, iceP_alpha, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_x, iceP_z, iceP_alpha);
        }
    }

private:

    Response _response;
};

template<class T> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GenericBase_getBasePose : public Callback_GenericBase_getBasePose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&);

    Callback_GenericBase_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGenericBase::GenericBasePrx proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_x;
        ::Ice::Int iceP_z;
        ::Ice::Float iceP_alpha;
        try
        {
            proxy->end_getBasePose(iceP_x, iceP_z, iceP_alpha, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_x, iceP_z, iceP_alpha, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GenericBase_getBaseState : public Callback_GenericBase_getBaseState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_GenericBase_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGenericBase::GenericBasePrx proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_state;
        try
        {
            proxy->end_getBaseState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_state);
        }
    }

private:

    Response _response;
};

template<class T> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GenericBase_getBaseState : public Callback_GenericBase_getBaseState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_GenericBase_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGenericBase::GenericBasePrx proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_state;
        try
        {
            proxy->end_getBaseState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_state, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
