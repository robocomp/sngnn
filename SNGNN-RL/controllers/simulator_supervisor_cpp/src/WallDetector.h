// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `WallDetector.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __WallDetector_h__
#define __WallDetector_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompWallDetector
{

class WallDetector;
class WallDetectorPrx;

}

namespace RoboCompWallDetector
{

struct WallT
{
    float timestamp;
    int id;
    float x1;
    float y1;
    float x2;
    float y2;

    std::tuple<const float&, const int&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(timestamp, id, x1, y1, x2, y2);
    }
};

using WallList = ::std::vector<::RoboCompWallDetector::WallT>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompWallDetector
{

class WallDetector : public virtual ::Ice::Object
{
public:

    using ProxyType = WallDetectorPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void gotwalls(::RoboCompWallDetector::WallList, const ::Ice::Current&) = 0;
    bool _iceD_gotwalls(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompWallDetector
{

class WallDetectorPrx : public virtual ::Ice::Proxy<WallDetectorPrx, ::Ice::ObjectPrx>
{
public:

    void gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompWallDetector::WallDetectorPrx::_iceI_gotwalls, iceP_lst, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto gotwallsAsync(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompWallDetector::WallDetectorPrx::_iceI_gotwalls, iceP_lst, context);
    }

    ::std::function<void()>
    gotwallsAsync(const ::RoboCompWallDetector::WallList& iceP_lst,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompWallDetector::WallDetectorPrx::_iceI_gotwalls, iceP_lst, context);
    }

    void _iceI_gotwalls(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompWallDetector::WallList&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    WallDetectorPrx() = default;
    friend ::std::shared_ptr<WallDetectorPrx> IceInternal::createProxy<WallDetectorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompWallDetector::WallT>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompWallDetector::WallT, S>
{
    static void read(S* istr, ::RoboCompWallDetector::WallT& v)
    {
        istr->readAll(v.timestamp, v.id, v.x1, v.y1, v.x2, v.y2);
    }
};

}

namespace RoboCompWallDetector
{

using WallDetectorPtr = ::std::shared_ptr<WallDetector>;
using WallDetectorPrxPtr = ::std::shared_ptr<WallDetectorPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompWallDetector
{

class WallDetector;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompWallDetector::WallDetector>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompWallDetector::WallDetector*);

}

}

namespace RoboCompWallDetector
{

class WallDetector;
::Ice::Object* upCast(::RoboCompWallDetector::WallDetector*);
typedef ::IceInternal::Handle< ::RoboCompWallDetector::WallDetector> WallDetectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompWallDetector::WallDetector> WallDetectorPrx;
typedef WallDetectorPrx WallDetectorPrxPtr;
void _icePatchObjectPtr(WallDetectorPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompWallDetector
{

struct WallT
{
    ::Ice::Float timestamp;
    ::Ice::Int id;
    ::Ice::Float x1;
    ::Ice::Float y1;
    ::Ice::Float x2;
    ::Ice::Float y2;
};

typedef ::std::vector< ::RoboCompWallDetector::WallT> WallList;

}

namespace RoboCompWallDetector
{

class Callback_WallDetector_gotwalls_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WallDetector_gotwalls_Base> Callback_WallDetector_gotwallsPtr;

}

namespace IceProxy
{

namespace RoboCompWallDetector
{

class WallDetector : public virtual ::Ice::Proxy<WallDetector, ::IceProxy::Ice::Object>
{
public:

    void gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_gotwalls(_iceI_begin_gotwalls(iceP_lst, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_gotwalls(iceP_lst, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_gotwalls(iceP_lst, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_gotwalls(iceP_lst, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::RoboCompWallDetector::Callback_WallDetector_gotwallsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_gotwalls(iceP_lst, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_gotwalls(const ::RoboCompWallDetector::WallList& iceP_lst, const ::Ice::Context& context, const ::RoboCompWallDetector::Callback_WallDetector_gotwallsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_gotwalls(iceP_lst, context, del, cookie);
    }

    void end_gotwalls(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_gotwalls(const ::RoboCompWallDetector::WallList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompWallDetector
{

class WallDetector : public virtual ::Ice::Object
{
public:

    typedef WallDetectorPrx ProxyType;
    typedef WallDetectorPtr PointerType;

    virtual ~WallDetector();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void gotwalls(const ::RoboCompWallDetector::WallList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_gotwalls(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const WallDetector& lhs, const WallDetector& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const WallDetector& lhs, const WallDetector& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompWallDetector::WallT>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompWallDetector::WallT, S>
{
    static void write(S* ostr, const ::RoboCompWallDetector::WallT& v)
    {
        ostr->write(v.timestamp);
        ostr->write(v.id);
        ostr->write(v.x1);
        ostr->write(v.y1);
        ostr->write(v.x2);
        ostr->write(v.y2);
    }
};

template<typename S>
struct StreamReader< ::RoboCompWallDetector::WallT, S>
{
    static void read(S* istr, ::RoboCompWallDetector::WallT& v)
    {
        istr->read(v.timestamp);
        istr->read(v.id);
        istr->read(v.x1);
        istr->read(v.y1);
        istr->read(v.x2);
        istr->read(v.y2);
    }
};

}

namespace RoboCompWallDetector
{

template<class T>
class CallbackNC_WallDetector_gotwalls : public Callback_WallDetector_gotwalls_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WallDetector_gotwalls(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WallDetector_gotwalls<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WallDetector_gotwalls<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WallDetector_gotwalls<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WallDetector_gotwalls<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WallDetector_gotwalls : public Callback_WallDetector_gotwalls_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WallDetector_gotwalls(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WallDetector_gotwalls<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WallDetector_gotwalls<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WallDetector_gotwalls<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WallDetector_gotwallsPtr
newCallback_WallDetector_gotwalls(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WallDetector_gotwalls<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
