// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `JoystickAdapter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __JoystickAdapter_h__
#define __JoystickAdapter_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompJoystickAdapter
{

class JoystickAdapter;
class JoystickAdapterPrx;

}

namespace RoboCompJoystickAdapter
{

struct AxisParams
{
    ::std::string name;
    float value;

    std::tuple<const ::std::string&, const float&> ice_tuple() const
    {
        return std::tie(name, value);
    }
};

struct ButtonParams
{
    bool clicked;

    std::tuple<const bool&> ice_tuple() const
    {
        return std::tie(clicked);
    }
};

using AxisList = ::std::vector<::RoboCompJoystickAdapter::AxisParams>;

using ButtonsList = ::std::vector<::RoboCompJoystickAdapter::ButtonParams>;

struct TData
{
    ::std::string id;
    ::RoboCompJoystickAdapter::AxisList axes;
    ::RoboCompJoystickAdapter::ButtonsList buttons;
    int velAxisIndex;
    int dirAxisIndex;

    std::tuple<const ::std::string&, const ::RoboCompJoystickAdapter::AxisList&, const ::RoboCompJoystickAdapter::ButtonsList&, const int&, const int&> ice_tuple() const
    {
        return std::tie(id, axes, buttons, velAxisIndex, dirAxisIndex);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : public virtual ::Ice::Object
{
public:

    using ProxyType = JoystickAdapterPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void sendData(::RoboCompJoystickAdapter::TData, const ::Ice::Current&) = 0;
    bool _iceD_sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapterPrx : public virtual ::Ice::Proxy<JoystickAdapterPrx, ::Ice::ObjectPrx>
{
public:

    void sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJoystickAdapter::JoystickAdapterPrx::_iceI_sendData, iceP_data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendDataAsync(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJoystickAdapter::JoystickAdapterPrx::_iceI_sendData, iceP_data, context);
    }

    ::std::function<void()>
    sendDataAsync(const ::RoboCompJoystickAdapter::TData& iceP_data,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJoystickAdapter::JoystickAdapterPrx::_iceI_sendData, iceP_data, context);
    }

    void _iceI_sendData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    JoystickAdapterPrx() = default;
    friend ::std::shared_ptr<JoystickAdapterPrx> IceInternal::createProxy<JoystickAdapterPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompJoystickAdapter::AxisParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJoystickAdapter::AxisParams, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::AxisParams& v)
    {
        istr->readAll(v.name, v.value);
    }
};

template<>
struct StreamableTraits<::RoboCompJoystickAdapter::ButtonParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompJoystickAdapter::ButtonParams, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::ButtonParams& v)
    {
        istr->readAll(v.clicked);
    }
};

template<>
struct StreamableTraits<::RoboCompJoystickAdapter::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJoystickAdapter::TData, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::TData& v)
    {
        istr->readAll(v.id, v.axes, v.buttons, v.velAxisIndex, v.dirAxisIndex);
    }
};

}

namespace RoboCompJoystickAdapter
{

using JoystickAdapterPtr = ::std::shared_ptr<JoystickAdapter>;
using JoystickAdapterPrxPtr = ::std::shared_ptr<JoystickAdapterPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJoystickAdapter::JoystickAdapter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompJoystickAdapter::JoystickAdapter*);

}

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapter;
::Ice::Object* upCast(::RoboCompJoystickAdapter::JoystickAdapter*);
typedef ::IceInternal::Handle< ::RoboCompJoystickAdapter::JoystickAdapter> JoystickAdapterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJoystickAdapter::JoystickAdapter> JoystickAdapterPrx;
typedef JoystickAdapterPrx JoystickAdapterPrxPtr;
void _icePatchObjectPtr(JoystickAdapterPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompJoystickAdapter
{

struct AxisParams
{
    ::std::string name;
    ::Ice::Float value;
};

struct ButtonParams
{
    bool clicked;

    bool operator==(const ButtonParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(clicked != rhs_.clicked)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ButtonParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(clicked < rhs_.clicked)
        {
            return true;
        }
        else if(rhs_.clicked < clicked)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ButtonParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const ButtonParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const ButtonParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const ButtonParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompJoystickAdapter::AxisParams> AxisList;

typedef ::std::vector< ::RoboCompJoystickAdapter::ButtonParams> ButtonsList;

struct TData
{
    ::std::string id;
    ::RoboCompJoystickAdapter::AxisList axes;
    ::RoboCompJoystickAdapter::ButtonsList buttons;
    ::Ice::Int velAxisIndex;
    ::Ice::Int dirAxisIndex;
};

}

namespace RoboCompJoystickAdapter
{

class Callback_JoystickAdapter_sendData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JoystickAdapter_sendData_Base> Callback_JoystickAdapter_sendDataPtr;

}

namespace IceProxy
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : public virtual ::Ice::Proxy<JoystickAdapter, ::IceProxy::Ice::Object>
{
public:

    void sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendData(_iceI_begin_sendData(iceP_data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendData(iceP_data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_data, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_data, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::RoboCompJoystickAdapter::Callback_JoystickAdapter_sendDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_data, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& iceP_data, const ::Ice::Context& context, const ::RoboCompJoystickAdapter::Callback_JoystickAdapter_sendDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_data, context, del, cookie);
    }

    void end_sendData(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : public virtual ::Ice::Object
{
public:

    typedef JoystickAdapterPrx ProxyType;
    typedef JoystickAdapterPtr PointerType;

    virtual ~JoystickAdapter();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const JoystickAdapter& lhs, const JoystickAdapter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const JoystickAdapter& lhs, const JoystickAdapter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::AxisParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJoystickAdapter::AxisParams, S>
{
    static void write(S* ostr, const ::RoboCompJoystickAdapter::AxisParams& v)
    {
        ostr->write(v.name);
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJoystickAdapter::AxisParams, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::AxisParams& v)
    {
        istr->read(v.name);
        istr->read(v.value);
    }
};

template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::ButtonParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompJoystickAdapter::ButtonParams, S>
{
    static void write(S* ostr, const ::RoboCompJoystickAdapter::ButtonParams& v)
    {
        ostr->write(v.clicked);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJoystickAdapter::ButtonParams, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::ButtonParams& v)
    {
        istr->read(v.clicked);
    }
};

template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJoystickAdapter::TData, S>
{
    static void write(S* ostr, const ::RoboCompJoystickAdapter::TData& v)
    {
        ostr->write(v.id);
        ostr->write(v.axes);
        ostr->write(v.buttons);
        ostr->write(v.velAxisIndex);
        ostr->write(v.dirAxisIndex);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJoystickAdapter::TData, S>
{
    static void read(S* istr, ::RoboCompJoystickAdapter::TData& v)
    {
        istr->read(v.id);
        istr->read(v.axes);
        istr->read(v.buttons);
        istr->read(v.velAxisIndex);
        istr->read(v.dirAxisIndex);
    }
};

}

namespace RoboCompJoystickAdapter
{

template<class T>
class CallbackNC_JoystickAdapter_sendData : public Callback_JoystickAdapter_sendData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JoystickAdapter_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JoystickAdapter_sendData : public Callback_JoystickAdapter_sendData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JoystickAdapter_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
