// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `OmniRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <OmniRobot.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_ids[2] =
{
    "::Ice::Object",
    "::RoboCompOmniRobot::OmniRobot"
};
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_ops[] =
{
    "correctOdometer",
    "getBasePose",
    "getBaseState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetOdometer",
    "setOdometer",
    "setOdometerPose",
    "setSpeedBase",
    "stopBase"
};
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name = "correctOdometer";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name = "getBasePose";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name = "getBaseState";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name = "resetOdometer";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name = "setOdometer";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name = "setOdometerPose";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name = "setSpeedBase";
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_stopBase_name = "stopBase";

}

bool
RoboCompOmniRobot::OmniRobot::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompOmniRobot_OmniRobot_ids, iceC_RoboCompOmniRobot_OmniRobot_ids + 2, s);
}

::std::vector<::std::string>
RoboCompOmniRobot::OmniRobot::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompOmniRobot_OmniRobot_ids[0], &iceC_RoboCompOmniRobot_OmniRobot_ids[2]);
}

::std::string
RoboCompOmniRobot::OmniRobot::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompOmniRobot::OmniRobot::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompOmniRobot::OmniRobot";
    return typeId;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_correctOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_z;
    float iceP_alpha;
    istr->readAll(iceP_x, iceP_z, iceP_alpha);
    inS.endReadParams();
    this->correctOdometer(iceP_x, iceP_z, iceP_alpha, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_getBasePose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int iceP_x;
    int iceP_z;
    float iceP_alpha;
    this->getBasePose(iceP_x, iceP_z, iceP_alpha, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_x, iceP_z, iceP_alpha);
    inS.endWriteParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_getBaseState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    this->getBaseState(iceP_state, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_state);
    inS.endWriteParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_resetOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resetOdometer(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    istr->readAll(iceP_state);
    inS.endReadParams();
    this->setOdometer(::std::move(iceP_state), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setOdometerPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_z;
    float iceP_alpha;
    istr->readAll(iceP_x, iceP_z, iceP_alpha);
    inS.endReadParams();
    this->setOdometerPose(iceP_x, iceP_z, iceP_alpha, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setSpeedBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_advx;
    float iceP_advz;
    float iceP_rot;
    istr->readAll(iceP_advx, iceP_advz, iceP_rot);
    inS.endReadParams();
    this->setSpeedBase(iceP_advx, iceP_advz, iceP_rot, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_stopBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->stopBase(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompOmniRobot_OmniRobot_ops, iceC_RoboCompOmniRobot_OmniRobot_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompOmniRobot_OmniRobot_ops)
    {
        case 0:
        {
            return _iceD_correctOdometer(in, current);
        }
        case 1:
        {
            return _iceD_getBasePose(in, current);
        }
        case 2:
        {
            return _iceD_getBaseState(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_resetOdometer(in, current);
        }
        case 8:
        {
            return _iceD_setOdometer(in, current);
        }
        case 9:
        {
            return _iceD_setOdometerPose(in, current);
        }
        case 10:
        {
            return _iceD_setSpeedBase(in, current);
        }
        case 11:
        {
            return _iceD_stopBase(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_correctOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_alpha);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_getBasePose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompOmniRobot::OmniRobot::GetBasePoseResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            ::RoboCompOmniRobot::OmniRobot::GetBasePoseResult v;
            istr->readAll(v.x, v.z, v.alpha);
            return v;
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_getBaseState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGenericBase::TBaseState>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_resetOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_setOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_state);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_setOdometerPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_alpha);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_setSpeedBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_advx, float iceP_advz, float iceP_rot, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_advx, iceP_advz, iceP_rot);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompOmniRobot::OmniRobotPrx::_iceI_stopBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_stopBase_name);
    outAsync->invoke(iceC_RoboCompOmniRobot_OmniRobot_stopBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompGenericBase::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompOmniRobot::OmniRobotPrx::_newInstance() const
{
    return ::IceInternal::createProxy<OmniRobotPrx>();
}

const ::std::string&
RoboCompOmniRobot::OmniRobotPrx::ice_staticId()
{
    return RoboCompOmniRobot::OmniRobot::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name = "correctOdometer";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name = "getBasePose";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name = "getBaseState";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name = "resetOdometer";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name = "setOdometer";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name = "setOdometerPose";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name = "setSpeedBase";

const ::std::string iceC_RoboCompOmniRobot_OmniRobot_stopBase_name = "stopBase";

}
::IceProxy::Ice::Object* ::IceProxy::RoboCompOmniRobot::upCast(::IceProxy::RoboCompOmniRobot::OmniRobot* p) { return p; }

void
::IceProxy::RoboCompOmniRobot::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompOmniRobot::OmniRobot>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompOmniRobot::OmniRobot;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_alpha);
        result->endWriteParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_correctOdometer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_correctOdometer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_getBasePose(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_getBasePose(::Ice::Int& iceP_x, ::Ice::Int& iceP_z, ::Ice::Float& iceP_alpha, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_getBasePose_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_alpha);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_getBaseState(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_getBaseState_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_state);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_resetOdometer(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_resetOdometer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_resetOdometer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_setOdometer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_setOdometer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_alpha);
        result->endWriteParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_setOdometerPose(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_setOdometerPose_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_setSpeedBase(::Ice::Float iceP_advx, ::Ice::Float iceP_advz, ::Ice::Float iceP_rot, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_advx);
        ostr->write(iceP_advz);
        ostr->write(iceP_rot);
        result->endWriteParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_setSpeedBase(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_setSpeedBase_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompOmniRobot::OmniRobot::_iceI_begin_stopBase(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompOmniRobot_OmniRobot_stopBase_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompOmniRobot_OmniRobot_stopBase_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompOmniRobot_OmniRobot_stopBase_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompOmniRobot_OmniRobot_stopBase_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompOmniRobot::OmniRobot::end_stopBase(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompOmniRobot_OmniRobot_stopBase_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompGenericBase::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompOmniRobot::OmniRobot::_newInstance() const
{
    return new OmniRobot;
}

const ::std::string&
IceProxy::RoboCompOmniRobot::OmniRobot::ice_staticId()
{
    return ::RoboCompOmniRobot::OmniRobot::ice_staticId();
}

RoboCompOmniRobot::OmniRobot::~OmniRobot()
{
}

::Ice::Object* RoboCompOmniRobot::upCast(::RoboCompOmniRobot::OmniRobot* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_ids[2] =
{
    "::Ice::Object",
    "::RoboCompOmniRobot::OmniRobot"
};

}

bool
RoboCompOmniRobot::OmniRobot::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompOmniRobot_OmniRobot_ids, iceC_RoboCompOmniRobot_OmniRobot_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompOmniRobot::OmniRobot::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompOmniRobot_OmniRobot_ids[0], &iceC_RoboCompOmniRobot_OmniRobot_ids[2]);
}

const ::std::string&
RoboCompOmniRobot::OmniRobot::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompOmniRobot::OmniRobot::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompOmniRobot::OmniRobot";
    return typeId;
#else
    return iceC_RoboCompOmniRobot_OmniRobot_ids[1];
#endif
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_correctOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_z;
    ::Ice::Float iceP_alpha;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_alpha);
    inS.endReadParams();
    this->correctOdometer(iceP_x, iceP_z, iceP_alpha, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_getBasePose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_z;
    ::Ice::Float iceP_alpha;
    this->getBasePose(iceP_x, iceP_z, iceP_alpha, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_x);
    ostr->write(iceP_z);
    ostr->write(iceP_alpha);
    inS.endWriteParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_getBaseState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    this->getBaseState(iceP_state, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_state);
    inS.endWriteParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_resetOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->resetOdometer(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setOdometer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompGenericBase::TBaseState iceP_state;
    istr->read(iceP_state);
    inS.endReadParams();
    this->setOdometer(iceP_state, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setOdometerPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_z;
    ::Ice::Float iceP_alpha;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_alpha);
    inS.endReadParams();
    this->setOdometerPose(iceP_x, iceP_z, iceP_alpha, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_setSpeedBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_advx;
    ::Ice::Float iceP_advz;
    ::Ice::Float iceP_rot;
    istr->read(iceP_advx);
    istr->read(iceP_advz);
    istr->read(iceP_rot);
    inS.endReadParams();
    this->setSpeedBase(iceP_advx, iceP_advz, iceP_rot, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompOmniRobot::OmniRobot::_iceD_stopBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->stopBase(current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompOmniRobot_OmniRobot_all[] =
{
    "correctOdometer",
    "getBasePose",
    "getBaseState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetOdometer",
    "setOdometer",
    "setOdometerPose",
    "setSpeedBase",
    "stopBase"
};

}

bool
RoboCompOmniRobot::OmniRobot::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompOmniRobot_OmniRobot_all, iceC_RoboCompOmniRobot_OmniRobot_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompOmniRobot_OmniRobot_all)
    {
        case 0:
        {
            return _iceD_correctOdometer(in, current);
        }
        case 1:
        {
            return _iceD_getBasePose(in, current);
        }
        case 2:
        {
            return _iceD_getBaseState(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_resetOdometer(in, current);
        }
        case 8:
        {
            return _iceD_setOdometer(in, current);
        }
        case 9:
        {
            return _iceD_setOdometerPose(in, current);
        }
        case 10:
        {
            return _iceD_setSpeedBase(in, current);
        }
        case 11:
        {
            return _iceD_stopBase(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompOmniRobot::OmniRobot::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompOmniRobot::OmniRobot, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompOmniRobot::OmniRobot::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompOmniRobot::OmniRobot, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompOmniRobot::_icePatchObjectPtr(OmniRobotPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompOmniRobot::OmniRobotPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompOmniRobot::OmniRobot::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
